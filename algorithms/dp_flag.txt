Camino minimos en un tablero hasta abajo a la derecha, pero pudiendo hacer K movimientos de
alfil, pagando el costo de cada casilla que pasamos.
Con una flag ahorramos computo.

1 int f (int i , int j , int k, int b) {
2 int &r = dp[ i ][ j ][ k][b]; i f ( r != −1) return r ;
3 i f ( i == M− 1 && j == N− 1) return r = T[M− 1][N− 1];
4 r = INF;
5 i f ( i < M− 1) r = min( r , T[ i ][ j ] + f ( i +1, j , k, 0) ) ;
6 i f ( j < N− 1) r = min( r , T[ i ][ j ] + f ( i , j +1, k, 0) ) ;
7 i f ( i < M− 1 && j < N− 1 && k>0) {
8 r = min( r , T[ i ][ j ] + f ( i +1, j +1, k−1, 1) ) ;
9 }
10 i f ( i < M− 1 && j < N− 1 && b) {
11 r = min( r , T[ i ][ j ] + f ( i +1, j +1, k, 1) ) ;
12 }
13 return r ;
14 }


Devolver la cantidad de caminos mínimos para el problem anterior.
1 int dp2[1010][1010];
2 int cantMinimos(int i , int j )
3 {
4 int &r = dp2[ i ][ j ];
5 i f ( r != −1) return r ;
6 i f ( i == M− 1 && j == N− 1) return r = 1;
7 r = 0;
8 i f ( i < M− 1 && f ( i , j ) == T[ i ][ j ] + f ( i +1, j ) )
9 r += cantMinimos( i +1, j ) ;
10 i f ( j < N− 1 && f ( i , j ) == T[ i ][ j ] + f ( i , j+1))
11 r += cantMinimos( i , j+1);
12 return r ;
13 }
