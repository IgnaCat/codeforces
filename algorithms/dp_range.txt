Dada una cadena de caracteres {, }, [ , ] , ( y ) de longitud par, dar la
mínima cantidad de reemplazos de caracteres que se le deben
realizar a este string para dejar una secuencia “bien parenteseada”.


1 // f (a,b) = respuesta para S[a,b)
2 int f (int a, int b) {
3 int &r = dp[a][b];
4 i f ( r != −1) return r ;
5 i f (b − a <= 0) return r=0;
6 i f (b − a == 1) return r=INF;
7 r = f (a+1,b−1) + costo_matchear(S[a] , S[b−1]);
8 for(int i = a + 1 ; i < b ; i++) {
9 r = min( r , f (a, i ) + f ( i ,b) ) ;
10 }
11 return r ;
12 }



Dado X ≤ 1015 devolver la cantidad de números 0 ≤ Y ≤ X tal que Y
no contenga números consecutivos en su representación en base 10.

1 int f (int p, int u, int b) {
2 int &r = dp[p][u][b]; i f ( r!=−1) return r ;
3 i f (p==sz(U) ) return r = 1;
4 r = 0;
5 int L = (b==0 ? U[p]−’0 ’ : 9) + 1 ;
6 forn(x,L) i f ( x!=u | | p==0 | | (u==0 && b==2) ) {
7 int nb;
8 i f (b==0) {
9 i f (x == U[p]−’0 ’ ) {
10 nb = 0;
11 } else i f (x==0 && p==0) {
12 nb = 2;
13 } else {
14 nb = 1;
15 }
16 } else i f (b==1) {
17 nb = 1;
18 } else {
19 i f (x==0) {
20 nb = 2;
21 } else {
22 nb = 1;
23 }
24 }
25 r += f (p+1,x,nb) ;
26 }
27 return r ;
28 }